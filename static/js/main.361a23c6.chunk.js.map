{"version":3,"sources":["actions/cityActions.js","actions/weatherActions.js","assets/weatherIcons/default.svg","components/City/City.jsx","api.js","assets/weatherIcons/atmosphere.svg","assets/weatherIcons/clear.svg","assets/weatherIcons/cloud.svg","assets/weatherIcons/drizzle.svg","assets/weatherIcons/rain.svg","assets/weatherIcons/snow.svg","assets/weatherIcons/thunderstorm.svg","components/Weather/Weather.jsx","App.jsx","reducers/weatherReducer.js","reducers/cityReducer.js","reducers/index.js","store.js","index.js"],"names":["SET_CITY_INFO","setCityInfo","city","country","type","payload","SET_WEATHER_INFO","setWeatherInfo","sky","temperature","module","exports","connect","props","useState","cityName","setCityName","useEffect","enterHandler","evt","key","findCityWeather","global","addEventListener","removeEventListener","instance","get","then","response","data","name","sys","weather","main","Math","ceil","temp","className","placeholder","value","onChange","e","currentTarget","onClick","require","default","create","baseURL","weatherIcons","defaultIcon","Atmosphere","atmosphereIcon","Clear","clearIcon","Clouds","cloudsIcon","Drizzle","drizzleIcon","Rain","rainIcon","Snow","snowIcon","Thunderstorm","thunderstormIcon","daysInWeek","months","dayOfWeek","Date","getDay","date","getDate","getMonth","src","alt","floor","City","initialState","combineReducers","state","action","createStore","reducers","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.361a23c6.chunk.js","sourcesContent":["export const SET_CITY_INFO = 'SET_CITY_INFO';\r\n\r\nexport const setCityInfo = (city, country) => {\r\n  return {\r\n    type: SET_CITY_INFO,\r\n    payload: {\r\n      city,\r\n      country,\r\n    },\r\n  };\r\n};\r\n","export const SET_WEATHER_INFO = 'SET_WEATHER_INFO';\r\n\r\nexport const setWeatherInfo = (sky, temperature) => {\r\n  return {\r\n    type: SET_WEATHER_INFO,\r\n    payload: {\r\n      sky,\r\n      temperature,\r\n    },\r\n  };\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/default.59ce60d9.svg\";","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport instance from '../../api';\r\nimport './City.scss';\r\nimport { setCityInfo } from '../../actions/cityActions';\r\nimport { setWeatherInfo } from '../../actions/weatherActions';\r\n\r\nconst City = (props) => {\r\n  const [cityName, setCityName] = useState('');\r\n  useEffect(() => {\r\n    const enterHandler = (evt) => {\r\n      if (evt.key === 'Enter') {\r\n        findCityWeather();\r\n      }\r\n    };\r\n    global.addEventListener('keydown', enterHandler);\r\n    return () => {\r\n      global.removeEventListener('keydown', enterHandler);\r\n    };\r\n  });\r\n  const findCityWeather = () => {\r\n    instance\r\n      .get(`weather?q=${cityName}&appid=b2bb16e5c74f7b3d4a012f42a45b3ae4`)\r\n      .then((response) => {\r\n        props.setCityInfo(response.data.name, response.data.sys.country);\r\n        props.setWeatherInfo(\r\n          response.data.weather[0].main,\r\n          Math.ceil(response.data.main.temp - 272)\r\n        );\r\n        setCityName('');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section className='city'>\r\n      <div className='city__name'>\r\n        {props.city && props.country\r\n          ? props.city + ', ' + props.country\r\n          : '...'}\r\n      </div>\r\n      <div className='city__name-input'>\r\n        <input\r\n          type='text'\r\n          placeholder='City name...'\r\n          value={cityName}\r\n          onChange={(e) => setCityName(e.currentTarget.value)}\r\n        />\r\n        <button onClick={findCityWeather}>Find</button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ city }) => {\r\n  return {\r\n    city: city.city,\r\n    country: city.country,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setCityInfo, setWeatherInfo })(City);\r\n","const { default: Axios } = require('axios');\r\n\r\nconst instance = Axios.create({\r\n  baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n});\r\n\r\nexport default instance;\r\n","module.exports = __webpack_public_path__ + \"static/media/atmosphere.4242ceaf.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear.5161eb59.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.56c7c285.svg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.662b8fd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.b334d405.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.e7dfde3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.7802c3f2.svg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Weather.scss';\r\nimport defaultIcon from '../../assets/weatherIcons/default.svg';\r\nimport atmosphereIcon from '../../assets/weatherIcons/atmosphere.svg';\r\nimport clearIcon from '../../assets/weatherIcons/clear.svg';\r\nimport cloudsIcon from '../../assets/weatherIcons/cloud.svg';\r\nimport drizzleIcon from '../../assets/weatherIcons/drizzle.svg';\r\nimport rainIcon from '../../assets/weatherIcons/rain.svg';\r\nimport snowIcon from '../../assets/weatherIcons/snow.svg';\r\nimport thunderstormIcon from '../../assets/weatherIcons/thunderstorm.svg';\r\n\r\nconst weatherIcons = {\r\n  defaultIcon,\r\n  Atmosphere: atmosphereIcon,\r\n  Clear: clearIcon,\r\n  Clouds: cloudsIcon,\r\n  Drizzle: drizzleIcon,\r\n  Rain: rainIcon,\r\n  Snow: snowIcon,\r\n  Thunderstorm: thunderstormIcon,\r\n};\r\n\r\nconst daysInWeek = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nconst Weather = (props) => {\r\n  const dayOfWeek = daysInWeek[new Date().getDay()];\r\n  const date = new Date().getDate() + ' ' + months[new Date().getMonth()];\r\n  return (\r\n    <section className='weather'>\r\n      <div className='weather__icon'>\r\n        <img\r\n          src={!props.sky ? defaultIcon : weatherIcons[props.sky]}\r\n          alt='weather-icon'\r\n        />\r\n      </div>\r\n      <div className='weather__about'>{props.sky}</div>\r\n      <div className='weather__date'>\r\n        {dayOfWeek}, {date}\r\n      </div>\r\n      <div className='weather__temperature'>\r\n        {props.temperature\r\n          ? props.temperature +\r\n            '째C' +\r\n            ' / ' +\r\n            Math.floor((props.temperature * 9) / 5 + 32) +\r\n            '째F'\r\n          : '...째C   ...째F'}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ weather }) => {\r\n  return {\r\n    sky: weather.sky,\r\n    temperature: weather.temperature,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Weather);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport City from './components/City/City';\r\nimport Weather from './components/Weather/Weather';\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <main className={!props.sky ? 'default' : props.sky}>\r\n      <div className='container'>\r\n        <div className='wrapper'>\r\n          <City />\r\n          <Weather />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ weather }) => {\r\n  return {\r\n    sky: weather.sky,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(App);\r\n","import { SET_WEATHER_INFO } from '../actions/weatherActions';\r\n\r\nconst initialState = {\r\n  sky: null,\r\n  temperature: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_INFO:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { SET_CITY_INFO } from '../actions/cityActions';\r\n\r\nconst initialState = {\r\n  city: '',\r\n  country: '',\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CITY_INFO:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { default as weatherReducer } from './weatherReducer';\r\nimport { default as cityReducer } from './cityReducer';\r\n\r\nexport default combineReducers({\r\n  weather: weatherReducer,\r\n  city: cityReducer,\r\n});\r\n","import reducers from './reducers';\r\nconst { createStore } = require('redux');\r\n\r\nexport default createStore(reducers);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App.jsx';\nimport './index.scss';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}